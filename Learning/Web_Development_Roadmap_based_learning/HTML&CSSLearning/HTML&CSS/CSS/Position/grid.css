*{
    margin:0;
}

.container{
    background: rgb(34,34,34);
    height: 100vh;
    padding: 20px;
    /* Grid Property here */
    display: grid;
    /* grid-template-columns: 100px 100px 100px;
    grid-template-rows: 100px 100px 100px; */
    /* instead of above we can do the sam elike below */
    /* grid-template-columns: repeat(5,100px); */
    /* fr:- fraction unit */
    /* grid-template-columns: repeat(4,1fr); */
    /* grid-template-columns: [start] 100px 100px [end] 100px; */
    /* grid-template-columns: [start] 100px 100px 100px [end]; */
    /* grid-template-columns: 100px 100px 100px; */
    /* grid-template-columns: 1fr minmax(200px,1fr) 1fr;
    grid-template-rows: repeat(3,1fr); */
    /* grid-template-columns:repeat(auto-fit,100px); */
    /* grid-template-columns:repeat(auto-fill,100px); */
    /* grid-template-rows: repeat(auto-fit,100px); */
    /* grid-template-rows: repeat(3,100px); */
    grid-template-columns: repeat(3,100px);
    grid-template-rows: repeat(3,100px);
    grid-gap: 10px;
    /* grid is powerfull bcuz we can use flexbox property inside grid aswell */
    /* justify-content: center;
    align-items: center; */
    /* h is used for header , m -> main area*/
    /* grid-template-areas: "h h h"
    "m m m"
    "s.a"
    "f f f"; */
    grid-template-areas: 
    "h h h"
    "s m m"
    "a m m"
    "f f f";
}
/* 

If typing out both grid-column and grid-row is too much for you, there's yet another shorthand for that. grid-area accepts four values separated by slashes: grid-row-start, grid-column-start, grid-row-end, followed by grid-column-end.

One example of this would be grid-area: 1 / 1 / 3 / 6;.

*/

/* 
If grid items aren't explicitly placed with grid-area, grid-column, grid-row, etc., they are automatically placed according to their order in the source code. We can override this using the order property, which is one of the advantages of grid over table-based layout.

By default, all grid items have an order of 0, but this can be set to any positive or negative value, similar to z-index.

Right now, the carrots in the second column are being poisoned and the weeds in the last column are being watered. Change the order value of the poison to fix this right away!
*/
header{
    /* grid-column-start: 1;
    grid-column-end: 3; */

    /* shortand for above */
    /* grid-column: 1/3; */

    /* grid-row-start: 1;
    grid-row-end: 3; */
    /* above shorthand */
    /* grid-row: 1/3; */
    /* below is use d bwith '''grid-template-columns: [start] 100px 100px 100px [end];''' */
    /* grid-column: start/end; */
    /* order: 1; */
    /* align-self: flex-end; */
    grid-area: h;
}

section{
    grid-area: s;
}

aside{
    /* grid-column-start: 1;
    grid-column-end: 3; */
    /* below is used with auto-fill in grid-templae-row/clumn propertt */
    /* grid-column-end: -1; */
    /* order: -1; */
    grid-area: a;
}
footer{
    grid-area: f;
}
main{
    /* order: 2; */
    /* grid area property is worked with only grid-template-areas: ; */
    grid-area: m;
}
.s{
    padding: 20px;
    background: rgb(84,84,84);
    text-align: center;
    color: #fff;
}
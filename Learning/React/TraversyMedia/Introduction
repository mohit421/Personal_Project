## What is React?
- React is a JavaScript Library/framework for building user interfaces. It was created by Facebook
- Websites/UIs are looked at in terms of components. 
- React is currently the most popular out of the major front-end frameworks

- It's a UI library to be specific and the difference is that a framework is complete solution so angular for instance is a full-featured framework bcuz it includes a router an http client state management library and much more
- The reason that react is often referred to as a framework is because it operates like one and it's a direct competition with framework like angular 
and It's a most popular out of themajor front-end frameworks which are react, vue.js , angular and spelt
- and it's often used with other library such a react router to create fullfeatured solution also the ecosystem of react is huge so it can be used for a wide variety of application such as Single page apps and servers side rendered application and static websites


<!-- ------------- -->

Why React?

- React allows us to build very dynamic and interacrive websites and user interfaces.
- Very Fast, especially with the new compiler.
- There is a huge ecosystem from Next.js to React Native
- Best framework to learn to get a job


<!--  -->
## Components

- Resuable pience of code that can be used to build elemens
on the page
- Allow us to break down complex UIs, which makes them easier to maintain and scale
- Components can get props passed in and can hold their own sate

<!--  -->

## State
- it represents the data that a component manages internally.
- This could be form input data, fetched data, UI-related data like if a modal is open/close
- There is also global state, which relates to the app as a whole and not a single component.
- we can also use a third-party state management system like redux

<!--  -->

## Hooks
- Allows us to use state and other react features within functional components
 - useState
 - useEffect        useContext, useMemo & useCallback
 - useRef           will be phased out in react 19
 - useReducer

<!--  -->

## JSX (JavaScript Syntax Extension)

- An HTML-like syntax within JavaScript(components)

## SPA, SSR & SSG
- Single Page App - Load a single HTML file and JavaScript loads the entire UI including routes.

- Server-Side Rendered - Server sends fully rendered page to client. You can fetch data and load it as well 
for eg: next.js  , SSR use something like vercel or netlify

- Static Site Generation - React generates static HTMl files at build time. These are very fast.
for eg: Gatsby, astro


<!--  -->
## Vite
- Vite is a super fast front-end toolkit that can be used for all kinds of JS projects including React.
- It is built on top of ESBuild, which is a very fast JS bundler.
- Fast development server with hot-reload.
- Installed with npm create vite@latest

<!--  -->

- npm come with nodejs so we have to install it.

<!--  -->
- index.html : this is SPA that is in main.tsx will run through JS
- there is div with id as "root"
- Entry point is main.jsx file
- there is library react , ReactDOM(which allow it work with document object model or the browser and then on that react DOM objedt we have a create root and that get passed in as element and as you can see we selecting that as root element by ID and then we are calling render method the we are render what ever we want as a application in this case)
- We have app component that is coming from App.jsx
-  we can cahgne this <App /> componnet with anything we want
- and the style is bcuz of ./index.css file
- In this we also have StrictMode which is wrapper component that'll check for potential problem in our app
-  Check the things like deprecated and unsafe lifecycle method legacy context API usage things like that

<!--  -->
- There are two css file 
1. index.css
2. App.css
- We are be gonna using Tailwind css so we need to install that and set it up
- let's keep the index.css and delete App.css


<!--  -->
- App.jsx is our main component
- and basically this is all the stuff we see right now on the homepage
- wipe that away and just create basicallya an empty component
- Now components can their functions and we can do a regular function so for instance we could do function app we can do an arrow function so con app and then use an arrow and we can type it out if we want but suggest by traversy media is to use extension name ( ES7 + React/Redux/React-Native snippets)
- type : rafce + enter - for arrow funcction and export at bottom
- rfc : for regular function 


<!--  -->
- get rid of index.css clear all 

<!-- Setup your tailwind css -->
go to site : https://tailwindcss.com/docs/guides/vite
- run below mentioned command
- $ npm install -D tailwind css postcss autoprefixer
- $ npx tailwind css init -p

  <!-- -------------------------> 
- include below in tailwind.config.js
/** @type {import('tailwind css').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}

- Include below in index.css
@tailwind base;
@tailwind components;
@tailwind utilities;



<!-- JSX Crash course basic -->
```
// // JSX crash course

// import React from 'react'

// const App = () => {
//   const name = "John";
//   const x = 10;
//   const y = 20;
//   const names = ['Mohit','John','Umang','Kisan','Rishabh'];
//   const loggedIn = true;
//   const styles = {
//     color: 'red',
//     fontSize: '55px',
//   }

//   // We can use like below if condition


//   // if(loggedIn){
//   //   return <h1>Hello Member</h1>;
//   // }

//   return (
//     <>
//       <div className='text-5xl'>App</div> 
//       {/* <h1 style = {{color: 'red', fontSize: '24px'}}>Hello {name}</h1> */}
//       {/* If we want to use incline styling use like below */}
//       <h1 style = {{color: 'green', fontSize: '28px'}}>Hello {name}</h1>
      
//       {/* If we want to use variable style then use like below */}
//       <p style={styles}>Hello {name}</p>
//       <p> The Sum of {x} and {y} is {x+y} </p>
//       {/* Below one gives error in console */}
//       {/* <ul>
//         {names.map((name)=>(
//           <li>{name}</li>
//         ))}
//       </ul> */}

//     {/* to get rid off error in console */}
//       <ul>
//         {names.map((name, index)=>(
//           <li key={index}>{name}</li>
//         ))}
//       </ul>
//       {/* We can do all kind of dynamic stuff below in place of hello member and Hello guest */}
//       {/* {loggedIn ? "Hello Member" : "Hello Guest"} */}
//       {loggedIn  && <h1>Hello Member</h1>
//       }
//     </>
    
//   )
// }

// export default App

```
<!-- ------------------------------- -->

<!--  -->
- <> </> : We call this one fragments
<!-- ------------- After copying all code from theme file 
link https://github.com/bradtraversy/react-crash-2024/blob/main/_theme_files/index.html -->

-- we want to break everything in components what we copy from index.html from theme file

- So in src folder -> we create new folder called components inside that navbar.jsx
- Component can have js/jsx (using javascript) and ts/tsx (using typescript) extensions
- Start from top to bottom 
- Navbar

<!-- How breakdown our code into components -->
- Navbar.jsx
- Card.jsx
- HomeCards.jsx
etc...

- We also learn how to use "Props" and defaults props
- Using Card.jsx we learn how to use wrapper components
- How to use variable for making tailwind css and for others too
- We can use props to not only change the content but to also change the styling 

<!-- JobListings Components -->
-  We comes to browse jobs and now we want to work with data a little bit now we don't have a backend yet so we're not going to be fetching these jobs just yet what we'll do fo now is just use a json file 
- In Src folder "jobs.json" file 
- We want only array of jobs and we can bring this into the file where we need it now we could bring it into the close "HomeCards"
- We want to make app.jsx component clean 
- We put listings into its won component and we have single listing component which will be we know this this block so in components let's create a new file and we'll call this job listings.jsx 
- Data is hard coded but we want it to come from json file 


<!-- Create list with map() -->
- Create a single div by copy pasting 1st job list and paste into map function.

- for all html inside map we can make a single component using single listing jobs

- JobListing.jsx component copy an past div section rom map into it

<!--  Limit Jobs to 3 on home page -->
- Can be done by using `const recentjobs = jobs.slice(0,3);`
- and replace `jobs.map()-> recentjobs.map()`


<!-- useState() hook and Desc Toggle -->

- Like we have more paragraph and I want to show more and show less state
- There are two types of states
  - components state like navbar, hero
  - We have app level or Global state

- Component State
  - go into JobListing component
  - we want to show more and show less button in our paragraph of cards under browse jobs
  - basically we'll have a piece of State called show full description we can change that if we clicked on button
  - first import {useState} from 'react'
  - then use like this
  ```
   const [showFullDescription, setShowFullDescription] = useState(false);
  let description = job.description;
  if(!showFullDescription){
    description = description.substring(0,110) + '...';
  }```

<!-- Creating an events in JobListing file and updateign component state -->
  - use button and add onClick event make sure to pass in function prevState or something like this that's the good way of doing this otherwise may be we can run into issues
  - We have a hamburger menu 
  - then we can use menuOpen and setMenuOpen  something like that in the same way we can do for that too


<!-- React Icons Package -->

- Home page being done we have i tag doesn't showing anything
- we don't have font awesome cdn
- We don't want cdn we want separate package for that
- This will kind of give us a little bit of experience of using additional packages
- npm i react-icons
- this will allows us work to not only font awesome but material icons and some of the other packages as well 
- We can go in any component
- Go to JobListing.jsx 
- import { FaMapMarker } from 'react-icons/fa'
- replace i tag with FaMapMarker


<!-- React Router Setup -->

- We want to start to add additional pages right we want the jobs page the ad job page so we can't do that just react.
- So this where we talked about earlier a library vs a Framework 
- Being a library doesn't have a way to add separate pages.
- So we gonna use separate pages so we're going to use react router which is basically the official router for react but it is a separate package so we need to install it.
- npm i react-router-dom
- we put the routing stuff in the main app.jsx file
- It's a pretty big package , it's built the remix framework which is server side rendering framework for react 
- it's built on top of react router 
- So there is a we can alot we can do
  - We are going to get into some stuff lie data loaders that react-routers offers 
- check App.jsx page to know how to create routes and we can add multiple pages 
- let's import few things from react-router-dom
- The way that this will work above the return in the App.jsx main app component we're going to create a variable called router and set that to createBrowserRouter which does just that it will create our router and that we're going to then use create routes from elements inside that we are going to use Routes components 
- we can put path there but this is gonna for homepage so we will
actually put an index and have element that represent that route
```
const router = createBrowserRouter(
  createRoutesFromElements(<Route index element={<h1> My App</h1>} />)
);
```
- Above is not going to do anything bcuz we haven't implemented the provider yet
- Provider is what it provide the router and that's going to go down in return 
- we have to copy and delet all components in return we use it in different ways

<!-- Create routes from elements and router provider -->
'''
// ````````````````````````` Start Home Page '''''''''''''''''''''''''''''''

import { 
  Route, 
  createBrowserRouter, 
  createRoutesFromElements,
  RouterProvider,
} from 'react-router-dom';
import React from 'react';
import Navbar from '../src/components/Navbar';
import Hero from './components/Hero';
import HomeCards from './components/HomeCards';
import JobListings from './components/JobListings';
import ViewAllJobs from './components/viewAllJobs';


const router = createBrowserRouter(
  createRoutesFromElements(
    <Route index element={<h1>Welcome to My App</h1>} />)
);

const App = () => {
  return <RouterProvider router={router} />;
  
};

export default App

```
- this will print welcome to My app on browser
- for changing path we can use below that will be shown on route localhost:300/about
```
const router = createBrowserRouter(
  createRoutesFromElements(
    <Route path='/about element={<h1>Welcome to My App</h1>} />)
);

const App = () => {
  return <RouterProvider router={router} />;
  
};

```


<!-- HomePage Component/Route  -->
- create a separate folder in components pages
- Layout
- Pages

etc

<!-- Link Component -->

- While clicking and go to other pages page refreshes
- use Link inplace of a tag and to instead of href
- It will become very fast and no refresh load thing in the title


<!--  Custom 404 Page -->
- We can add NotFoundPage if any page were not found like '*'
- Change Link tag to NavLink this work as the same way like Link
- Home link has a class of bg-black, So Basically we want to show that bg-black on whatever the active pages now we can do that by bringing in something link NavLink instead of Link which works it works in a very similar way except it adds a class to the active link

<!-- Active Links with NavLink -->
- Conditional Rendering


<!-- Json Server Setting -->

- While clicking on Read More we go to jobs/job.id
- Before that let's switch from just bringing in a JSON file to actually fetching data from Backend 
- To do this we're going to use something called JSON server .
- Which is fantastic library that basically lets us create mock API and we can send get, post, put, patch, delete, and requests
so we can create CRUD functionality it can be any resource you want have to do is create JSON file which we already have 
and we can put any type of resource we want in it.
- so we cna use our existing JSON file we just have to basically put back what we changed we was make in an object that has a Jobs , a named jobs array and then we can install JSON server and then we can simply run it 
- Go to the site: [JSON Server](https://www.npmjs.com/package/json-server)

- set '"server": "json-server --watch src/jobs.json --port 8000"'
- run on terminal : - npm run server 
- then we can see endpoints of localhost:8000/jobs
- If we go on browser then we can see our DATA 
- If we go on jobs/id then we can see single post 
- It is just like we have built RESTAPI with express/Djnago/Flask or anything else 
- We can also make post request and add one and it will added to the actual JSON file we can edit we can send a put request and send a delete request 
- So, essentially we now have a Backend, So where I want to fetch this data is going be from the job listings components because that's where that's the only place in this application where we need the jobs because we're using this component on both we can't see it now but we are using it on the homepage and on the jobs page.
- So, let's change this up a little bit we are no longer going to just bring in the jobs file we are going to make a request and we're going to do that inside of a use effect hook
- Because what the use effect hook does is it allows our components to have side effects and we want a side effect of fetching data when the component renders and when we get those jobs from the API we want to put them in state so we also want to bring in used state 
- After this was coming from API 


<!-- Loading Spinner -->
- npm i react-spinners
- We can use react spinner 

<!-- Conditional Fetching -->

- ```
 const apiUrl = isHome ? 'http://localhost:8000/jobs?_limit=3' : 'http://localhost:8000/jobs';
        try {
          const res = await fetch(apiUrl);
          const data = await res.json();
          setJobs(data);

        } catch (error){
          console.log("error fetching data", error);
        }
        finally {
          setLoading(false);
        }
```


<!--  Proxying  -->

- if we deploy this projects its no longer be at localhost:8000. SO we need to create a proxy
- SO, if you ever reach react-app then you know that you do that within your package.json.
- With vite it's a little different we do that within the config file.
- So let's go to vite config and in the server object under the port we're going to add a proxy and basically we're going to say if it's if it is prefixed with SL API then we want to use this so we're going to set that to an object with a target and that Target is going to be HTTP local host Port 8000 or whatever port we use for JSON server we're going to add change origin and set that to true 

- Now change localhost:8000 to /api and change in vite.config.js file for adding proxy 
- We use the backend we want to send a request us simply do /api .
- we have to change it in vite.config.js file 
- We don't have to change it in in every single file that we make a request so that's basically the data fetching using useEffect()
- There are other ways to fetch data 
- There is something called react-suspense which is included with react and it allows us to do a render while fetching 
<!--  Below we need to practice this way of fetching with the help of documentation other tutorials -->
- What we're doing here is fetch on render because when it renders it has a side effect of fetching the data but suspense will allow us render while fetching and we basically provides a fallback UI such as spinner or a loading text whatever we pass that in as a props as an attribute. 
- There is something also called react-query which is a third-party library there's one called SWR as well and those make data fetching a little easier than this so that might want to check out as well but this is like the base way of fetching from a client side components and with react-19 we have the new use hook we can also look into as well in fact that react 19 video 
- React has so many different ways to do the same exact things and some people will say that's wrong wew know do it this way and another person will say that's wrong So we just need to kind of do what works for us.

<!-- Single Page Job -->

- The way that we get the data is going to be a little different we're going to use a data loader from react router which is actually pretty cool but we first have to create the actual page for the single jobs
- We use "/jobs/:id" in jobPage route in app.jsx :id signifies that this is dynamic that's not a literal id. The letter id that we are passing in it's a symbol or a variable for whatever the ID is all right so let's save that and then if we go back here and reload 

- We can use a useEffect so that when this page loads we get the job
- What we do is use a data loader from react-router  this gonna work little bit different than we did with the jobListings 
- Data loader we basically create a function in this file and then we can export it from this file and then use that function in other areas so we can use this in basically as our Global state for whatever this job is and pass it into other components 
- Right under the JobPage function we're going to create a function I'm going to use an arrow but if we want to use a regular function we can we're going to call this job loader and we are going to set this to async and it's going to take in actually 
take a look of JobPage.jsx for more understanding 

<!-- useParams  -->

- useParams :- use this to get id

<!-- Data loader -->


<!-- Single Job Output -->


<!-- Add Job Page -->


<!-- Working with Forms -->

- in label instead of "for" we have to use htmlFor
- There are many ways to work with forms 
- other library like formic , there are lots of things we can do like refs 
- The common way or the core way of doing it is adding a piece of state for every field in our form bcuz these change and then when we change it or we type int it or select we change the state of that item 
- What we do it bring useState 
- Import useState, and then we want to create a state item for each field now there's a different ways we can do this we could have just a single object in our state  and have all the fields in that object or we can do a separate piece of state for every field which is what we are going to do just to keep it simple 

Like below we did in AddJobPage.jsx file

```
 const [ title, setTitle ] = useState('');
  const [ type, setType ] = useState('');
  const [ location, setLocation ] = useState('');
  const [ description, setDescription ] = useState('');
  const [ salary, setSalary ] = useState('');
  const [ companyName, setCompanyName ] = useState('');
  const [ companyDescription, setCompanyDescription ] = useState('');
  const [ contactEmail, setContactEmail ] = useState('');
  const [ contactPhone, setContactPhone ] = useState('');

```
- If we set then the value in the form will get updated 

<!-- Form Submission -->

- React 19 have something call actions where we can actually put an action and set that to function that's a brand new way of doing it.
- In react 19 that isn't even released yet so we are going to stick to just adding an onSubmit 


<!-- Delete job -->

- We want to make actual request to the API after delete functionality 
- What we use is for small application 
- we can use context API which we know we would have it in a context file we can use Redux or some other state manager but thi is such a small application we don't need that.


<!--- React Toastify Package -->

- We want some proof that we deleted teh jobs using toastify react spinner and these are things that we use in our every project 
- we can do toast.error as well for showing error

<!-- Edit Job -->

- using the same state what using AddJobPage.jsx code 
- for this one more thing we want to add is id\
- Make a PUT request 

<!--  Build Static Assets For Production -->

- Stop the development server 
- Run `npm run build`
- create a new folder called dist.
- and this dist is our production build 
- We can run that we vite in out package.json file there is file called preview 
- That should run the development build
- using ` npm run preview`
- That running on 4173
- top of the browser using this page is using production build of react
- 
